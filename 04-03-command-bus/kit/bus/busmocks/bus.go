// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package busmocks

import (
	context "context"

	bus "github.com/CodelyTV/go-hexagonal_http_api-course/04-03-command-bus/kit/bus"

	mock "github.com/stretchr/testify/mock"
)

// Bus is an autogenerated mock type for the Bus type
type Bus struct {
	mock.Mock
}

// DispatchCommand provides a mock function with given fields: _a0, _a1
func (_m *Bus) DispatchCommand(_a0 context.Context, _a1 bus.Command) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, bus.Command) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DispatchEvent provides a mock function with given fields: _a0, _a1
func (_m *Bus) DispatchEvent(_a0 context.Context, _a1 bus.Event) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, bus.Event) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DispatchQuery provides a mock function with given fields: _a0, _a1
func (_m *Bus) DispatchQuery(_a0 context.Context, _a1 bus.Query) (bus.QueryResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 bus.QueryResponse
	if rf, ok := ret.Get(0).(func(context.Context, bus.Query) bus.QueryResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bus.QueryResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, bus.Query) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterCommandHandler provides a mock function with given fields: _a0, _a1
func (_m *Bus) RegisterCommandHandler(_a0 bus.Type, _a1 bus.CommandHandler) {
	_m.Called(_a0, _a1)
}

// RegisterEventHandler provides a mock function with given fields: _a0, _a1
func (_m *Bus) RegisterEventHandler(_a0 bus.Type, _a1 bus.EventHandler) {
	_m.Called(_a0, _a1)
}

// RegisterQueryHandler provides a mock function with given fields: _a0, _a1
func (_m *Bus) RegisterQueryHandler(_a0 bus.Type, _a1 bus.QueryHandler) {
	_m.Called(_a0, _a1)
}
